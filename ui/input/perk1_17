Manifest(perk for 1_17 manhunt, 7, by ItsGeomecraft)

#CONSTANTS
EFFECT_DEFAULT_LENGTH = 3
DEFAULT_SPECIAL_TEXT_COLOR = "light_purple"
DEFAULT_INFO_TEXT_COLOR = "green"
UNDEAD = [zombie, skeleton,zombified_piglin]
SLOT_NUMBERS = [0,1,2,3,4,5,6,7,8]

#some general purpose helper functions
def abstract forPerk(perkScore, runnable){
    execute as @a[scores={<perkScore>=1}] run execute at @s run <runnable>
}
def abstract link(function, waitTime){
    schedule function <function> <waitTime>
}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~mutual_hunt~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
namespace.set(mutual_hunt)

onLoad(scoreboard objectives add player dummy)

def store_player_position_into_storage(){
#player 1
execute as @a[scores={player=1},limit=1] at @s store result storage player1_coord X int 1 run data get entity @s Pos[0]
execute as @a[scores={player=1},limit=1] at @s store result storage player1_coord Y int 1 run data get entity @s Pos[1]
execute as @a[scores={player=1},limit=1] at @s store result storage player1_coord Z int 1 run data get entity @s Pos[2]
#player 2
execute as @a[scores={player=2},limit=1] at @s store result storage player2_coord X int 1 run data get entity @s Pos[0]
execute as @a[scores={player=2},limit=1] at @s store result storage player2_coord Y int 1 run data get entity @s Pos[1]
execute as @a[scores={player=2},limit=1] at @s store result storage player2_coord Z int 1 run data get entity @s Pos[2]
link(mutual_hunt:store_player_position_into_storage, 1t)
}

def compass_update(){
execute as @a[scores={player=1},nbt={Inventory:[{Slot:8b, id:"minecraft:compass",Count:1b}]},limit=1] run item modify entity @s container.8 mutual_hunt:compass_update_player1
execute as @a[scores={player=2},nbt={Inventory:[{Slot:8b, id:"minecraft:compass",Count:1b}]},limit=1] run item modify entity @s container.8 mutual_hunt:compass_update_player2
link(mutual_hunt:compass_update, 1t)
}

def compass_setup(){
    item modify entity @s container.8 mutual_hunt:compass_setup
}

def compass_lose_player(){
    #player1
    execute if entity @a[scores={player=2},nbt={Dimension:"minecraft:overworld"},limit=1] run execute as @a[scores={player=1},nbt={Inventory:[{Slot:8b, id:"minecraft:compass",Count:1b}]},limit=1] run item modify entity @s container.8 mutual_hunt:compass_overworld
    execute if entity @a[scores={player=2},nbt={Dimension:"minecraft:the_nether"},limit=1] run execute as @a[scores={player=1},nbt={Inventory:[{Slot:8b, id:"minecraft:compass",Count:1b}]},limit=1] run item modify entity @s container.8 mutual_hunt:compass_the_nether
    execute if entity @a[scores={player=2},nbt={Dimension:"minecraft:the_end"},limit=1] run execute as @a[scores={player=1},nbt={Inventory:[{Slot:8b, id:"minecraft:compass",Count:1b}]},limit=1] run item modify entity @s container.8 mutual_hunt:compass_the_end

    #player2
    execute if entity @a[scores={player=1},nbt={Dimension:"minecraft:overworld"},limit=1] run execute as @a[scores={player=2},nbt={Inventory:[{Slot:8b, id:"minecraft:compass",Count:1b}]},limit=1] run item modify entity @s container.8 mutual_hunt:compass_overworld
    execute if entity @a[scores={player=1},nbt={Dimension:"minecraft:the_nether"},limit=1] run execute as @a[scores={player=2},nbt={Inventory:[{Slot:8b, id:"minecraft:compass",Count:1b}]},limit=1] run item modify entity @s container.8 mutual_hunt:compass_the_nether
    execute if entity @a[scores={player=1},nbt={Dimension:"minecraft:the_end"},limit=1] run execute as @a[scores={player=2},nbt={Inventory:[{Slot:8b, id:"minecraft:compass",Count:1b}]},limit=1] run item modify entity @s container.8 mutual_hunt:compass_the_end
    link(mutual_hunt:compass_lose_player, 1t)
}

item.modifier.setNBT(compass_setup, tag, "<{LodestoneDimension:"minecraft:overworld",LodestoneTracked:0b,LodestonePos:{X:1,Y:1,Z:1}}>")
item.modifier.copyNBT(compass_update_player1, minecraft:player2_coord, X, LodestonePos.X, replace, Y, LodestonePos.Y, replace, Z, LodestonePos.Z, replace)
item.modifier.copyNBT(compass_update_player2, minecraft:player1_coord, X, LodestonePos.X, replace, Y, LodestonePos.Y, replace, Z, LodestonePos.Z, replace)

item.modifier.setNBT(compass_overworld, tag, "<{LodestoneDimension:"minecraft:overworld"}>")
item.modifier.setNBT(compass_the_nether, tag, "<{LodestoneDimension:"minecraft:the_nether"}>")
item.modifier.setNBT(compass_the_end, tag, "<{LodestoneDimension:"minecraft:the_end"}>")


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~mutual_hunt~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~perk~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
#-----basic set up-----#
#PERK CONSTANTS
PERK_SCORE = [en_re, ho_sm, frag, fa_ca, phoe, d_f_ex, d_o_ex, mi_en]
HELPER_PERK_SCORE = [ho_sm_count, phoe_charge, d_f_ex_result, d_f_ex_id, d_o_ex_result]

namespace.set(perk)
def basic_property_score_setup(){
    scoreboard objectives add health health
    scoreboard objectives add death_count deathCount
    scoreboard objectives add gapple_count minecraft.used:minecraft.golden_apple
    scoreboard objectives add god_gapple_count minecraft.used:minecraft.enchanted_golden_apple
    scoreboard objectives add fire_tick dummy
}
def property_score_maintain(){
    execute as @a store result score @s fire_tick run data get entity @s Fire
}
onTick(function perk:property_score_maintain)
def scores_declare(){
    for.each(x, >PERK_SCORE<, scoreboard objectives add <x> dummy)
}
def helper_score_declare(){
    for.each(x, >HELPER_PERK_SCORE<, scoreboard objectives add <x> dummy)
}
onLoad(function perk:basic_property_score_setup, function perk:scores_declare, function perk:helper_score_declare)
onLoad("<tellraw @a {"text":"Perk for 1.17 loading succesful","color":"gold"}>")

#helpers
def heal(){
    effect give @s minecraft:saturation 20
}
def regen1hp(){
    effect give @s regeneration 1 2
}
#-----basic set up-----#
#-----actual perk-----#
def enhanced_resiliance(){
    function perk:enhanced_resiliance_loop
}
def enhanced_resiliance_loop(){
    forPerk(en_re, execute if score @s health matches 10.. run effect give @s resistance >EFFECT_DEFAULT_LENGTH< 0 true)
    forPerk(en_re, execute if score @s health matches ..10 run effect give @s resistance >EFFECT_DEFAULT_LENGTH< 1 true)
    link(perk:enhanced_resiliance_loop, 1t)
}

def holy_smite(){
    function perk:holy_smite_limit_maximum
    wait(28s, perk:holy_smite_loop)
}
def holy_smite_loop(){
    forPerk(ho_sm, give @s snowball{holy_smite:1b})
    loop(0, 28s)
}
def holy_smite_limit_maximum(){
    forPerk(ho_sm, execute store result score @s ho_sm_count run clear @s minecraft:snowball{holy_smite:1b} 0)
    forPerk(ho_sm, execute if score @s ho_sm_count matches 4.. run clear @s minecraft:snowball{holy_smite:1b} 1)
    loop()
}
onLand(holy_smite, function perk:first_smite)
def first_smite(){
    summon minecraft:lightning_bolt ~ ~ ~
    summon area_effect_cloud ~ ~ ~ {Duration:23,Tags:["holy_smite"]}
    schedule function perk:second_smite 11t append
}
def second_smite(){
    for.each(x, >UNDEAD<, "<execute as @e[type=minecraft:area_effect_cloud, tag=holy_smite, nbt={Age:10}] at @s run execute at @e[type=<x>,distance=..5] run summon lightning_bolt ~ ~ ~>")
    schedule function perk:third_smite 11t append
}
def third_smite(){
    for.each(x, >UNDEAD<, "<execute as @e[type=minecraft:area_effect_cloud, tag=holy_smite, nbt={Age:21}] at @s run execute at @e[type=<x>,distance=..5] run summon lightning_bolt ~ ~ ~>")
}

def fragmentation(){
    wait(32s, perk:fragmentation_loop)
}
def fragmentation_loop(){
    forPerk(frag, give @s tnt)
    loop(0, 32s)
}

recipe.custom.shaped(fake_emerald_block, emerald_block, 1, empty, green_dye, empty, green_dye, chiseled_stone_bricks, green_dye, empty, green_dye, empty)
recipe.custom.shaped(fake_gold_block, gold_block, 1, empty, yellow_dye, empty, yellow_dye, smooth_stone, yellow_dye, empty, yellow_dye, empty)
recipe.custom.restrict(fake_emerald_block, [scores={fa_ca=1}])
recipe.custom.restrict(fake_gold_block, [scores={fa_ca=1}])
def fake_cash(){
    #pass
}

def phoenix(){
    forPerk(phoe, scoreboard players set @s phoe_charge 1)
    function perk:phoenix_loop
}
def phoenix_loop(){
    forPerk(phoe, execute if score @s gapple_count matches 1 run function perk:phoenix_refresh)
    forPerk(phoe, execute if score @s god_gapple_count matches 1 run function perk:phoenix_refresh)
    forPerk(phoe, execute if score @s health matches ..10 if score @s fire_tick matches 1.. if score @s phoe_charge matches 1 run function perk:phoenix_reborn)
    loop()
}
def phoenix_reborn(){
    effect give @s minecraft:regeneration 30 0
    effect give @s minecraft:fire_resistance 30 0
    scoreboard players set @s phoe_charge 0
    tellraw @s [{"text":"Phoenix has been ","color":"aqua"},{"text":"activated","color":"light_purple"}]
}
def phoenix_refresh(){
    scoreboard players set @s phoe_charge 1
    scoreboard players set @s gapple_count 0
    scoreboard players set @s god_gapple_count 0
    tellraw @s [{"text":"Phoenix has been ","color":"aqua"},{"text":"recharged","color":"light_purple"}]
}

recipe.custom.shaped(forest_star, "<carrot_on_a_stick{display:{Name:'{"text":"Forest Star","color":>DEFAULT_SPECIAL_TEXT_COLOR<}'},forest_star:1b}>", 1, empty, dark_oak_log, empty, dark_oak_log, redstone, dark_oak_log, empty, dark_oak_log, empty)
recipe.custom.restrict(forest_star, [scores={d_f_ex=1}])
onClick.right(forest_star, function perk:deep_forest_explorer_locate)
import.adv(in_forest)
def deep_forest_explorer(){
    forPerk(d_f_ex, "<give @s leather_boots{display:{Name:'{"text":"Forest Exploration Boots"}'},Unbreakable:1b,Enchantments:[{id:"minecraft:feather_falling",lvl:5s}]} 1>")
    advancement revoke @s only perk:in_forest
}
def deep_forest_explorer_grant_effect(){
    execute if score @s d_f_ex matches 1 run function perk:regen1hp
    scoreboard players set @s d_f_ex_id 1
    wait(10s, perk:deep_forest_explorer_refresh_effect)
}
def deep_forest_explorer_id_timer(){
    forPerk(d_f_ex, execute if score @s d_f_ex_id matches 1.. run scoreboard players add @s d_f_ex_id 1)
}
onTick(function perk:deep_forest_explorer_id_timer)
def deep_forest_explorer_refresh_effect(){
    forPerk(d_f_ex, execute if score @s d_f_ex_id matches 201 run advancement revoke @s only perk:in_forest)
    forPerk(d_f_ex, execute if score @s d_f_ex_id matches 201 run scoreboard players set @s d_f_ex_id 0)
}
def deep_forest_explorer_locate(){
    execute store result score @s d_f_ex_result run locate mansion
    tellraw @s [{"text":"Nerest Mansion is ","color":"green"},{"color":>DEFAULT_SPECIAL_TEXT_COLOR<,"score":{"name":"@s","objective":"d_f_ex_result"}},{"text":" blocks away ","color":"green"}]
}

recipe.custom.shaped(ocean_guide, "<carrot_on_a_stick{display:{Name:'{"text":"Ocean Guide","color":>DEFAULT_SPECIAL_TEXT_COLOR<}'},ocean_guide:1b}>", 1, empty, kelp, empty, kelp, redstone, kelp, empty, kelp, empty)
recipe.custom.restrict(ocean_guide, [scores={d_o_ex=1}])
onClick.right(ocean_guide, function perk:deep_ocean_explorer_locate)
import.adv(in_ocean)
def deep_ocean_explorer(){
    forPerk(d_o_ex, "<give @s turtle_helmet{display:{Name:'{"text":"Ocean Explorer Helmet"}'},Unbreakable:1b,Enchantments:[{id:"minecraft:aqua_affinity",lvl:1s}]} 1>")
    advancement revoke @s only perk:in_ocean
}
def deep_ocean_explorer_effect(){
    execute if score @s d_o_ex matches 1 run effect give @s minecraft:dolphins_grace 3 0 true
    advancement revoke @s only perk:in_ocean
}
def deep_ocean_explorer_locate(){
    execute store result score @s d_o_ex_result run locate monument
    tellraw @s [{"text":"Nerest Ocean Monument is ","color":>DEFAULT_INFO_TEXT_COLOR<},{"color":>DEFAULT_SPECIAL_TEXT_COLOR<,"score":{"name":"@s","objective":"d_o_ex_result"}},{"text":" blocks away ","color":>DEFAULT_INFO_TEXT_COLOR<}]
}

recipe.custom.shapeless(quick_iron, iron_ingot, 1, raw_iron)
recipe.custom.restrict(quick_iron, [scores={mi_en=1}])
recipe.custom.shapeless(quick_gold, gold_ingot, 1, raw_gold)
recipe.custom.restrict(quick_gold, [scores={mi_en=1}])
recipe.custom.shapeless(quick_flint, flint, 1, gravel)
recipe.custom.restrict(quick_flint, [scores={mi_en=1}])
recipe.custom.shapeless(more_debris, netherite_scrap, 2, ancient_debris)
recipe.custom.restrict(more_debris, [scores={mi_en=1}])
import.item.modifier(fortune4)
def mining_engineer(){
    function perk:mining_engineer_loop
}
def mining_engineer_loop(){
    forPerk(mi_en, execute if entity @s[nbt={SelectedItem:{id:"minecraft:golden_pickaxe"}}] run enchant @s fortune 1)
    forPerk(mi_en, execute if entity @s[nbt={SelectedItem:{id:"minecraft:stone_pickaxe"}}] run enchant @s fortune 1)
    forPerk(mi_en, execute if entity @s[nbt={SelectedItem:{id:"minecraft:iron_pickaxe"}}] run enchant @s fortune 2)
    forPerk(mi_en, execute if entity @s[nbt={SelectedItem:{id:"minecraft:diamond_pickaxe"}}] run enchant @s fortune 3)
    forPerk(execute if entity @s[nbt={SelectedItem:{id:"minecraft:netherite_pickaxe"}}] run item modify entity @s weapon.mainhand perk:fortune4)
    loop()
}

#-----actual perk-----#
#-----starting function-----#
#main function
def start(){
    function perk:stop

    #compass tracking
    function mutual_hunt:store_player_position_into_storage
    function mutual_hunt:compass_update
    function mutual_hunt:compass_lose_player

    #perk
    function perk:enhanced_resiliance
    function perk:holy_smite
    function perk:fragmentation
    function perk:fake_cash
    function perk:phoenix
    function perk:deep_forest_explorer
    function perk:deep_ocean_explorer
    function perk:mining_engineer
}
# TODO
# score.clear
def stop(){
    break.all()
}
#-----starting function-----#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~perk~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#